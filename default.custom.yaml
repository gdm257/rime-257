# default.custom.yaml
# encoding: utf-8
# to do list:
# 候選數（已完成）
# 上屏（已完成）
# 標點符號（已完成）
# 快捷鍵（已完成）
# 方案列表（已完成）
# 已知 bug：標點符號的「`」無效



patch:
  # 候选数
  menu:
    page_size: 5


  # 切换方案
  switcher:
    caption: 〔方案选单〕
    hotkeys:
      - 'Control+q'
      - 'Control+Shift+f'
      - 'Control+Shift+grave'
      - 'Control+Shift+asciitilde'

  schema_list:
    - {schema: luna_pinyin_simp}     # 朙月拼音·简化字，可以按 ctrl+` 选择临时启用正體中文
    - {schema: nihongo-r}            # 日语
    # - {schema: easy_en}              # 英语
    # - {schema: luna_pinyin_tw}       # 朙月拼音·臺灣正體，可以按 ctrl+` 選擇臨時啓用简体中文
    # - schema: luna_pinyin_fluency  # 语句流
    # - schema: double_pinyin_flypy  # 小鶴雙拼
    # - schema: wubi_pinyin          # 五笔拼音混合輸入
    # - schema: wubi86               # 五笔86


  # 上屏
  #
  # clear: 取消输入
  # commit_text：已输入的候选文字上屏并切换至西文输入模式
  # commit_code：已输入的编码字符上屏并切换至西文输入模式
  # noop：屏蔽该切换键
  # inline_ascii：在输入法的临时西文编辑区内输入字母、数字、符号、空格等，回车上屏后自动复位到中文
  #
  ascii_composer:
    good_old_caps_lock: true
    switch_key:
      Shift_L: commit_code
      Shift_R: commit_code
      Control_L: noop
      Control_R: noop
      Caps_Lock: noop
      Eisu_toggle: clear


  # 标点符号
  punctuator:
    half_shape:
      '~': '~'
      '`': {commit: '`'}
      '!': {commit: '！'}
      '@': '@'
      '#': '#'
      '$': '$'
      '%': '%'
      '^': '…' # U+2026 Horizontal Ellipsis 中文省略号
      '*': '*'
      '(' : '（'
      ')' : '）'
      '_': '_'
      '=': '='
      '|': '—' # U+2014 Em Dash，2 个 Em Dash 就是中文破折号
      '\': '、'
      '[': '【'
      ']':  '】'
      '{': '{'
      '}': '}'
      ':': {commit: '：'}
      ';': {commit: '；'}
      '?': {commit: '？'}
      ',': {commit: '，'}
      '.': {commit: '。'}
      '/': ['/', '\']
      '<': '《'
      '>': '》'
      "'": {pair: ['「', '」']}
      '"': {pair: ['『', '』']}
      # (如果不灵，则 把 luna_pinyin_simp.custom.yaml 里的 punctuator 部分注释掉，或保持兩者一致)
    symbols:
      #符号
      '/ss' : [ の, –, ·, ・, 〜, ÷, ×, ⨯ ]
      '/ssr' : [ ✓, ☑, ✗, ☒, ◯, ©, ®, ™ ]
      '/no' : 'の'
      '/de': 'の'
      '/zhi': 'の'
      '/yuan' : '◯' # U+25EF 	LARGE CIRCLE（圈号）
      '/quan' : '◯'
      '/gou' : '✓' # U+2713 CHECK MARK（勾号）
      '/cha' : '✗' # U+2717	BALLOT X (叉号)
      # ✓ U+2713 CHECK MARK（勾号）
      # ✔ U+2714 HEAVY CHECK MARK（粗勾号）
      # ☑ U+2611 BALLOT BOX WITH CHECK（打勾方格）
      # ☐	U+2610	BALLOT BOX（方格）
      # ✗	U+2717	BALLOT X（叉号）
      # ✘	U+2718	HEAVY BALLOT X（粗体叉号）
      # ☒	U+2612	BALLOT BOX WITH X（叉号方格）
      '/cheng' : '×' # U+00D7	 MULTIPLICATION SIGN（乘法符号）
      '/chengyi' : '×'
      '/chenghao' : '×'
      '/ji' : '⨯' # U+2A2F  VECTOR OR CROSS PRODUCT（向量积）
      '/chu' : '÷'
      '/chuyi' : '÷'
      '/chuhao' : '÷'
      '/dot' : '·' # U+00B7 Middle Dot（间隔号）
      '/dot' : '・' # U+30FB Katakana Middle Dot (片假名中点)
      '/en' : '–' # U+2013 EN DASH
      #数字
      '/0' : '〇' # U+3007 日文数字零、中文小写数字零
      '/1': [ ①, Ⅰ, 壹, 壱 ]
      '/2': [ ②, Ⅱ, 贰, 弐, 弍, 貳, 貮 ]
      '/3': [ ③, Ⅲ, 叁, 参, 叄, 參, 弎 ]
      '/4': [ ④, Ⅳ, 肆 ]
      '/5': [ ⑤, Ⅴ, 伍, 㐅 ]
      '/6': [ ⑥, Ⅵ, 陸 ]
      '/7': [ ⑦, Ⅶ, 柒, 漆, 質 ]
      '/8': [ ⑧, Ⅷ, 捌 ]
      '/9': [ ⑨, Ⅸ, 玖 ]
      '/10': [ ⑩, Ⅹ, 拾 ]
      '/11': [ ⑪, Ⅺ ]
      '/12': [ ⑫, Ⅻ ]
      '/13': [ ⑬ ]
      '/50': [ Ⅼ ]
      '/100': [ Ⅽ, 佰, 陌 ]
      '/500': [ Ⅾ ]
      '/1000': [ Ⅿ, 仟, 阡 ]
      '/1000': '萬'
      '/wan' : '萬'
      '/yi' : '億'
      #羅馬數字
      '/lm': [ ⅰ, ⅱ, ⅲ, ⅳ, ⅴ, ⅵ, ⅶ, ⅷ, ⅸ, ⅹ, ⅺ, ⅻ, ⅼ, ⅽ, ⅾ, ⅿ ]
      '/lmd': [ Ⅰ, Ⅱ, Ⅲ, Ⅳ, Ⅴ, Ⅵ, Ⅶ, Ⅷ, Ⅸ, Ⅹ, Ⅺ, Ⅻ, Ⅼ, Ⅽ, Ⅾ, Ⅿ ]
      #希臘
      '/xl': [ α, β, γ, δ, ε, ζ, η, θ, ι, κ, λ, μ, ν, ξ, ο, π, ρ, σ, ς, τ, υ, φ, χ, ψ, ω ]
      '/xld': [ Α, Β, Γ, Δ, Ε, Ζ, Η, Θ, Ι, Κ, Λ, Μ, Ν, Ξ, Ο, Π, Ρ, Σ, Τ, Υ, Φ, Χ, Ψ, Ω ]
      #貨幣
      '/hb' : [ ￥, ￡, €, ¥]
      #箭頭
      '/jt': [ ↑, ↓, ←, →, ↔, ↖, ↗, ↙, ↘, ↕, ⇧,⇩, ⇦, ⇨, ⇳, ⇌, ⇵, ↻, ↺, ➢ ]

  key_binder:
    bindings:
      - { when: always, accept: Shift+space, toggle: full_shape }
      - { when: has_menu, accept: minus, send: Page_Up }
      - { when: has_menu, accept: equal, send: Page_Down }
      - { when: has_menu, accept: bracketleft, send: Page_Up }
      - { when: has_menu, accept: bracketright, send: Page_Down }
      - { when: has_menu, accept: comma, send: Page_Up }
      - { when: has_menu, accept: period, send: Page_Down }
      #
      # more technical binding
      #
      # Emacs style
      # - { when: composing, accept: Control+p, send: Up }
      # - { when: composing, accept: Control+n, send: Down }
      # - { when: composing, accept: Control+b, send: Left }
      # - { when: composing, accept: Control+f, send: Right }
      # - { when: composing, accept: Control+a, send: Home }
      # - { when: composing, accept: Control+e, send: End }
      # - { when: composing, accept: Control+d, send: Delete }
      # - { when: composing, accept: Control+k, send: Shift+Delete }
      # - { when: composing, accept: Control+h, send: BackSpace }
      # - { when: composing, accept: Control+g, send: Escape }
      # - { when: composing, accept: Control+bracketleft, send: Escape }
      # - { when: composing, accept: Alt+v, send: Page_Up }
      # - { when: composing, accept: Control+v, send: Page_Down }
      # paging keys
      # - { when: composing, accept: ISO_Left_Tab, send: Page_Up }
      # - { when: composing, accept: Shift+Tab, send: Page_Up }
      # - { when: composing, accept: Tab, send: Page_Down }
      # - { when: has_menu, accept: minus, send: Page_Up }
      # - { when: has_menu, accept: equal, send: Page_Down }
      # - { when: paging, accept: comma, send: Page_Up }
      # - { when: has_menu, accept: period, send: Page_Down }
      # hotkey switch
      # - { when: always, accept: Control+Shift+1, select: .next }
      # - { when: always, accept: Control+Shift+2, toggle: ascii_mode }
      # - { when: always, accept: Control+Shift+3, toggle: full_shape }
      # - { when: always, accept: Control+Shift+4, toggle: simplification }
      # - { when: always, accept: Control+Shift+5, toggle: extended_charset }
      # - { when: always, accept: Control+Shift+exclam, select: .next }
      # - { when: always, accept: Control+Shift+at, toggle: ascii_mode }
      # - { when: always, accept: Control+Shift+numbersign, toggle: full_shape }
      # - { when: always, accept: Control+Shift+dollar, toggle: simplification }
      # - { when: always, accept: Control+Shift+percent, toggle: extended_charset }
      # - { when: always, accept: Shift+space, toggle: full_shape }
      # - { when: always, accept: Control+period, toggle: ascii_punct }
